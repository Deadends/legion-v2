version: '3.8'

services:
  legion-sidecar:
    build:
      context: .
      dockerfile: Containerfile.hardened
    container_name: legion-sidecar
    restart: unless-stopped
    
    # Security hardening
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    environment:
      - RUST_LOG=info
      - LEGION_CONFIG=/etc/legion/config.toml
      - LEGION_KEY_PROVIDER=file
      - LEGION_KEY_PATH=/var/lib/legion/keys/server.key
      - LEGION_SESSION_STORE=/var/lib/legion/sessions
      - LEGION_AUDIT_LOG=/var/log/legion/audit.log
    
    volumes:
      - legion-sessions:/var/lib/legion/sessions:rw
      - legion-keys:/var/lib/legion/keys:rw
      - legion-audit:/var/log/legion:rw
      - ./config/production.toml:/etc/legion/config.toml:ro
      - /tmp:/tmp:rw,noexec,nosuid,size=100m
    
    ports:
      - "8443:8443"
      - "9090:9090"
    networks:
      - legion-internal
      - legion-external
    
    healthcheck:
      test: ["/usr/local/bin/legion-sidecar", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    depends_on:
      - legion-db
      - legion-redis

  legion-prover:
    build:
      context: .
      dockerfile: Containerfile.hardened
    container_name: legion-prover
    restart: unless-stopped
    command: ["/usr/local/bin/legion-prover", "--worker-mode"]
    
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    read_only: true
    
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    
    environment:
      - RUST_LOG=info
      - LEGION_PROVER_THREADS=4
      - LEGION_SECURITY_LEVEL=Production
    
    volumes:
      - /tmp:/tmp:rw,noexec,nosuid,size=500m
    
    networks:
      - legion-internal

  legion-db:
    image: postgres:15-alpine
    container_name: legion-db
    restart: unless-stopped
    
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    
    environment:
      - POSTGRES_DB=legion
      - POSTGRES_USER=legion
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    
    volumes:
      - legion-db-data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    
    secrets:
      - db_password
    
    networks:
      - legion-internal
    
    healthcheck:
      test: ["pg_isready", "-U", "legion", "-d", "legion"]
      interval: 30s
      timeout: 10s
      retries: 3

  legion-redis:
    image: redis:7-alpine
    container_name: legion-redis
    restart: unless-stopped
    
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    
    command: >
      redis-server
      --requirepass-file /run/secrets/redis_password
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    volumes:
      - legion-redis-data:/data
    
    secrets:
      - redis_password
    
    networks:
      - legion-internal
    
    healthcheck:
      test: ["redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  legion-internal:
    driver: bridge
    internal: true
  legion-external:
    driver: bridge

volumes:
  legion-sessions:
    driver: local
  legion-keys:
    driver: local
  legion-audit:
    driver: local
  legion-db-data:
    driver: local
  legion-redis-data:
    driver: local

secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt